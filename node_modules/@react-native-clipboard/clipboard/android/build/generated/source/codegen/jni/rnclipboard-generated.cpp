
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "rnclipboard.h"

namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_getString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getString", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_getStrings(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getStrings", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_getImagePNG(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getImagePNG", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_getImageJPG(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getImageJPG", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_setImage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setImage", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_getImage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getImage", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_setString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setString", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_setStrings(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setStrings", "(Lcom/facebook/react/bridge/ReadableArray;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_hasString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "hasString", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_hasImage(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "hasImage", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_hasURL(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "hasURL", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_hasNumber(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "hasNumber", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_hasWebURL(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "hasWebURL", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_setListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "setListener", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_removeListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeListener", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "addListener", "(Ljava/lang/String;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeClipboardModuleSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeListeners", "(D)V", args, count, cachedMethodId);
}

NativeClipboardModuleSpecJSI::NativeClipboardModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["getString"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_getString};
  methodMap_["getStrings"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_getStrings};
  methodMap_["getImagePNG"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_getImagePNG};
  methodMap_["getImageJPG"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_getImageJPG};
  methodMap_["setImage"] = MethodMetadata {1, __hostFunction_NativeClipboardModuleSpecJSI_setImage};
  methodMap_["getImage"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_getImage};
  methodMap_["setString"] = MethodMetadata {1, __hostFunction_NativeClipboardModuleSpecJSI_setString};
  methodMap_["setStrings"] = MethodMetadata {1, __hostFunction_NativeClipboardModuleSpecJSI_setStrings};
  methodMap_["hasString"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_hasString};
  methodMap_["hasImage"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_hasImage};
  methodMap_["hasURL"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_hasURL};
  methodMap_["hasNumber"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_hasNumber};
  methodMap_["hasWebURL"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_hasWebURL};
  methodMap_["setListener"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_setListener};
  methodMap_["removeListener"] = MethodMetadata {0, __hostFunction_NativeClipboardModuleSpecJSI_removeListener};
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeClipboardModuleSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeClipboardModuleSpecJSI_removeListeners};
}

std::shared_ptr<TurboModule> rnclipboard_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "RNCClipboard") {
    return std::make_shared<NativeClipboardModuleSpecJSI>(params);
  }
  return nullptr;
}

} // namespace facebook::react
